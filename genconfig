#!/usr/bin/env python3

import os
import re
import glob

from datetime import datetime

ESP_DIR = "/boot" # TODO: Make this user-defined
OUTPUT_FILE = "build/DBOOT.CONF"

# Scan for initrds maching the kernel file
def scan_initrd(kernel_file):
	kernel_base = os.path.basename(kernel_file)

	# Extract version from kernel filename
	version = ""
	patterns = [
		r'^(bzImage|vmlinuz)[-_]?(.*)$',
		r'^(.*)(bzImage|vmlinuz)(.*)$'
	]

	for pattern in patterns:
		match = re.match(pattern, kernel_base)
		if match:
			version = match.group(2) if len(match.groups()) >= 2 else ""
			break

	# Common initrd patterns to search for
	initrd_patterns = []

	if version:
		initrd_patterns.extend([
			f"initramfs-{version}.img",
			f"initramfs-{version}",
			f"initrd-{version}.img",
			f"initrd-{version}",
			f"initramfs-{version}.gz",
			f"initrd.img-{version}",
			f"initramfs{version}.img",
			f"initrd{version}.img"
		])

	# Generic patterns as fallback
	initrd_patterns.extend([
		"initramfs-linux.img",
		"initramfs.img",
		"initrd.img",
		"initramfs",
		"initrd"
	])

	# Search for matching initrd
	for pattern in initrd_patterns:
		initrd_path = os.path.join(ESP_DIR, pattern)
		if os.path.isfile(initrd_path):
			return pattern

	# If no specific match found, find any initrd file
	initrd_files = glob.glob(os.path.join(ESP_DIR, "initr*")) + \
				   glob.glob(os.path.join(ESP_DIR, "initramfs*"))

	if initrd_files:
		return os.path.basename(initrd_files[0])

	return None

# Get PARTUUID from device
def get_partuuid(device):
	try:
		import subprocess
		result = subprocess.run(['lsblk', '-dno', 'PARTUUID', device], 
							  capture_output=True, text=True, check=True)
		partuuid = result.stdout.strip()
		if partuuid and partuuid != '':
			return partuuid
	except (subprocess.CalledProcessError, FileNotFoundError):
		pass
	return None

# Find the root device and PARTUUID
def find_root_device():
	root_device = None
	root_fstype = None

	# Try to read /proc/mounts to find root filesystem
	try:
		with open('/proc/mounts', 'r') as f:
			for line in f:
				parts = line.strip().split()
				if len(parts) >= 3 and parts[1] == '/':
					root_device = parts[0]
					root_fstype = parts[2]
					break
	except:
		pass

	if not root_device or not root_fstype:
		print(f"  ERROR: Could not get root device")
		return "", ""

	# Convert device to PARTUUID
	if root_device.startswith("/dev/"):
		partuuid = get_partuuid(root_device)
		if partuuid:
			return f"PARTUUID={partuuid}", root_fstype
		else:
			print(f"  ERROR: Could not get PARTUUID for {root_device}")

	# Return the root device as-is
	return root_device, root_fstype

# Generate the cmdline for the current system
def generate_cmd_line():
	rootdev, rootfstype = find_root_device()

	cmdline = [
		f"root={rootdev}",
		f"rootfstype={rootfstype}",

		"rw"
	]

	return " ".join(cmdline)

# Scan for kernel images in boot directory
def scan_kernels():
	if not os.path.isdir(ESP_DIR):
		raise FileNotFoundError(f"{ESP_DIR} directory not found!")

	# Find all bzImage and vmlinuz files
	kernel_patterns = [
		os.path.join(ESP_DIR, "bzImage*"),
		os.path.join(ESP_DIR, "vmlinuz*")
	]

	kernels = []
	for pattern in kernel_patterns:
		kernels.extend(glob.glob(pattern))

	# Remove duplicates and sort
	kernels = sorted(list(set(kernels)))

	if not kernels:
		raise FileNotFoundError(f"No kernel images found in {ESP_DIR}")

	return kernels

# Generate a config file based on the current system
def generate_config():
	print("NOTE: This tool is not perfect and can generate invalid configs.")
	print("      It is recommended to create your own config manually.")
	input("Press ENTER to continue...\n")

	try:
		kernels = scan_kernels()
		print(f"Scanning {ESP_DIR} for kernel images...")
		print(f"Found {len(kernels)} kernel image(s)")

		# Ensure build directory exits
		if(not os.path.exists("build")):
			os.mkdir("build")

		with open(OUTPUT_FILE, 'w') as f:
			f.write(f"# Generated config for '{os.uname()[1]}'\n")
			f.write(f"# on {datetime.now()}\n")
			f.write("\n")

			for kernel in kernels:
				kernel_name = os.path.basename(kernel)
				print(f"\nProcessing: {kernel_name}")
				config_name = input(f"  Enter a name for '{kernel_name}': ");
				if(not config_name):
					config_name = kernel_name

				# Write config for kernel
				f.write(f"[{config_name}]\n")
				f.write("type = linux\n")
				f.write(f"kernel = {kernel_name}\n")

				# Find and write initrd
				initrd = scan_initrd(kernel)
				if(initrd):
					f.write(f"module = {initrd}\n")
					print(f"  Found initrd: {initrd}")

				# Generate and write cmdline
				cmdline = generate_cmd_line()
				f.write(f"cmdline = {cmdline}\n")

		print(f"\nConfiguration written to: {OUTPUT_FILE}")
		print("Copy this file to: <YOUR_ESP>/EFI/DBOOT/DBOOT.CONF")

	except Exception as e:
		print(f"Error: {e}")
		return 1

	return 0

if __name__ == "__main__":
	exit(generate_config())
